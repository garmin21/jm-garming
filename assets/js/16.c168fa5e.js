(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{602:function(s,a,t){"use strict";t.r(a);var n=t(10),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-shell-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-shell-是什么"}},[s._v("#")]),s._v(" 1. shell 是什么")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Shell  可以是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（ command line interface ，简写为 CLI ）。 Shell  接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。")])]),s._v(" "),t("li",[t("p",[s._v("Shell 也可以是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本 script。这些脚本都通过 Shell 的解释执行，而不通过编译。")])]),s._v(" "),t("li",[t("p",[s._v("Shell 还可以是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能")])]),s._v(" "),t("li",[t("p",[s._v("Shell 这门语言可以帮助我们完成很多自动化任务，例如：保存数据，监测系统的负载，等等。")])]),s._v(" "),t("li",[t("p",[s._v("Shell 相比 C 等语言的优势在于它是完全嵌入在 Linux 中的，不需要安装，编译。")])]),s._v(" "),t("li",[t("p",[s._v("Shell 有很多种，只要能给用户提供命令行环境的程序，都可以看作是 Shell 。")]),s._v(" "),t("ul",[t("li",[s._v("Bourne Shell（sh） ，是目前所有 Shell  的祖先，被安装在几乎所有发源于 Unix  的操作系统上。")]),s._v(" "),t("li",[s._v("Bourne Again shell（bash） ，是 sh  的一个进阶版本，比 sh  更优秀， bash  是目前大多数 Linux  发行版以及 macOS  操作系统的默认 Shell 。")]),s._v(" "),t("li",[s._v("C Shell（csh） ，它的语法类似 C  语言。")]),s._v(" "),t("li",[s._v("TENEX C Shell（tcsh） ，它是 csh  的优化版本。")]),s._v(" "),t("li",[s._v("Korn shell（ksh） ，一般在收费的 Unix  版本上比较多见。")]),s._v(" "),t("li",[s._v("Z Shell（zsh） ，它是一种比较新近的 Shell ，集 bash 、 ksh  和 tcsh  各家之大成。")])])])]),s._v(" "),t("p",[s._v("关于 Shell 的几个常见命令")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("echo $SHELL")]),s._v(" 可以查看本机正在使用的 Shell ，其中 $SHELL 是环境变量。")]),s._v(" "),t("li",[t("code",[s._v("cat /etc/shells")]),s._v(" 可以查看当前的 Linux 系统安装的所有 Shell 。")]),s._v(" "),t("li",[t("code",[s._v("chsh")]),s._v(" 命令是切换 Shell 类型为 chsh 。")])]),s._v(" "),t("h2",{attrs:{id:"_2-编写第一个-shell-脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-编写第一个-shell-脚本"}},[s._v("#")]),s._v(" 2. 编写第一个 shell 脚本")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash 指定脚本要使用的 Shell 类型为 Bash 。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ! 被称为 Sha-bang ，或者 Shebang ， Linux 会分析它之后的指令，并载入该指令作为解析器。")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello word'")]),s._v("\n")])])]),t("p",[s._v("执行 shell 脚本，如果我们不是 root 用户的话，需要给脚本添加可执行权限才可以运行， "),t("code",[s._v("chmod +x hello.sh")]),s._v(" 。")]),s._v(" "),t("p",[s._v("增加执行权限后可以执行 "),t("code",[s._v("./hello.sh")]),s._v(" 来运行该脚本，也可以使用 "),t("code",[s._v("bash -x hello.sh")]),s._v(" 以调试模式运行脚本。")]),s._v(" "),t("p",[t("strong",[s._v("系统命令，直接执行 hello.sh 不需要路径")])]),s._v(" "),t("ol",[t("li",[t("code",[s._v("echo $PATH")]),s._v(" 获取查看系统里所有可以被直接执行程序的路径。")]),s._v(" "),t("li",[t("code",[s._v("sudo cp hello.sh /usr/bin")]),s._v(" 将 hello.sh 拷贝到任意一个 path 路径路径中，这里拷贝到 /usr/bin 。\n"),t("ul",[t("li",[s._v("注意： 当重新修改了脚本，需要重新拷贝到 之前拷贝到路径上，否则还是上次的内容")])])])]),s._v(" "),t("h2",{attrs:{id:"_3-shell-命令语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-shell-命令语句"}},[s._v("#")]),s._v(" 3. shell 命令语句")]),s._v(" "),t("h3",{attrs:{id:"_1-echo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-echo"}},[s._v("#")]),s._v(" 1. echo")]),s._v(" "),t("p",[s._v("echo 命令的作用是在屏幕输出一行文本，可以将该命令的参数原样输出。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello word'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用 -e 参数使得 echo 可以解析转义字符")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello \\n word'")]),s._v("\n")])])]),t("h3",{attrs:{id:"_2-引号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-引号"}},[s._v("#")]),s._v(" 2. 引号")]),s._v(" "),t("ol",[t("li",[s._v("单引号 '' ，单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号* 、美元符号$ 、反斜杠 \\ 等。")]),s._v(" "),t("li",[s._v('双引号 "" ，双引号比单引号宽松，大部分特殊字符在双引号里面，都会失去特殊含义，变成普通字符。三个特殊字符除外：美元符号 $ 、反引号 ``` 和反斜杠 \\')]),s._v(" "),t("li",[s._v("反引号 要求 Shell 执行被它括起来的内容，例如执行 echo"),t("code",[s._v("pwd")]),s._v("，相当于直接执行 pwd 命令 。")])]),s._v(" "),t("h3",{attrs:{id:"_3-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-变量"}},[s._v("#")]),s._v(" 3. 变量")]),s._v(" "),t("p",[s._v("Bash 没有数据类型的概念，所有的变量值都是字符串。")]),s._v(" "),t("h4",{attrs:{id:"_1-环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-环境变量"}},[s._v("#")]),s._v(" 1. 环境变量")]),s._v(" "),t("p",[s._v("环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，可以理解成全局的常量。")]),s._v(" "),t("ul",[t("li",[s._v("BASHPID： Bash  进程的进程 ID 。")]),s._v(" "),t("li",[s._v("EDITOR：默认的文本编辑器。")]),s._v(" "),t("li",[s._v("HOME：用户的主目录。")]),s._v(" "),t("li",[s._v("HOST：当前主机的名称。")]),s._v(" "),t("li",[s._v("LANG：字符集以及语言编码，比如 zh_CN.UTF-8。")]),s._v(" "),t("li",[s._v("PATH：由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。")]),s._v(" "),t("li",[s._v("PWD：当前工作目录。")]),s._v(" "),t("li",[s._v("SHELL： Shell  的名字。")]),s._v(" "),t("li",[s._v("TERM：终端类型名，即终端仿真器所用的协议。")]),s._v(" "),t("li",[s._v("UID：当前用户的 ID  编号。")]),s._v(" "),t("li",[s._v("USER：当前用户的用户名")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有的环境变量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示 由冒号分开的目录列表")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自定义环境变量")]),s._v("\n")])])]),t("h4",{attrs:{id:"_2-声明变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-声明变量"}},[s._v("#")]),s._v(" 2. 声明变量")]),s._v(" "),t("ol",[t("li",[s._v("字母、数字和下划线字符组成。")]),s._v(" "),t("li",[s._v("第一个字符必须是一个字母或一个下划线，不能是数字。")]),s._v(" "),t("li",[s._v("不允许出现空格和标点符号。")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("message")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# message 为变量名")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用变量 打印 Hello World")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$message")]),s._v("\n")])])]),t("h4",{attrs:{id:"_3-参数变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-参数变量"}},[s._v("#")]),s._v(" 3. 参数变量")]),s._v(" "),t("p",[s._v("可以这样调用我们的脚本文件 ./hello.sh 参数 1 参数 2 ... 其中参数 1、参数 2...被称为“参数变量”。")]),s._v(" "),t("ol",[t("li",[s._v("$# 参数的数目")]),s._v(" "),t("li",[s._v("$0 被运行的脚本名称")]),s._v(" "),t("li",[s._v("$1 第一个参数")]),s._v(" "),t("li",[s._v("$2 第二个参数")]),s._v(" "),t("li",[s._v("$N 第 N 个参数")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"脚本名称：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v("， 参数是 "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v('"')]),s._v("\n\n")])])]),t("p",[t("strong",[s._v("使用 shift 命令来挪移变量值：")])]),s._v(" "),t("p",[s._v("同样是 $1 ，通过 shift 使得它的值会变成原本是 $2 的值。因此 shift 命令常被用在循环中，使得参数一个接一个地被处理。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"脚本名称：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v("， 参数是 "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 参数是 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("shift")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"脚本名称：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v("， 参数是 "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 参数是 2")]),s._v("\n")])])]),t("h3",{attrs:{id:"_4-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-数组"}},[s._v("#")]),s._v(" 4. 数组")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("array")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'v1'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'v2'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'v3'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 访问数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 访问数组（bash下标是从0开始）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("*"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用*号访问数组所有的值")]),s._v("\n")])])]),t("h3",{attrs:{id:"_5-数学运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-数学运算"}},[s._v("#")]),s._v(" 5. 数学运算")]),s._v(" "),t("p",[s._v("在 Bash 中，所有的变量都是字符串， Bash 本身不会操作数字，因此它也不会做运算。不过可以使用 let 命令来实现运算。")]),s._v(" "),t("p",[s._v("bash 中可用的运算符有以下几种 加法 减法 乘法 除法 乘方 除余")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = 5"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = 2"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c = a + b"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"d = c ** 2"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 乘方")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"e = d % 2"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  除余")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$c")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出 c = 7")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"d = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$d")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出 d = 49")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"e = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$e")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出 e = 1")]),s._v("\n")])])]),t("h3",{attrs:{id:"_6-read"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-read"}},[s._v("#")]),s._v(" 6. read")]),s._v(" "),t("p",[s._v("请求输入， read 命令读取到的文本会立即被存储在一个变量里。 也可以同时接收一个或者多个")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" name age sex\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$age")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$sex")]),s._v('!"')]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 -p 参数， 显示提示信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请输入你的姓名"')]),s._v(" name\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v('!"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用 -n 参数可以限制用户输入的字符串的最大长度（字符数）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请输入您的姓名："')]),s._v(" -n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" name\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用 -t 参数可以限定用户的输入时间（单位：秒）超过这个时间，就不读取输入了。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请输入您的姓名："')]),s._v(" -n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" -t "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" name\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用 -s 参数可以隐藏输入内容，在用户输入密码时使用。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请输入密码："')]),s._v(" -s password\n")])])]),t("p",[s._v("执行 ./read.sh 时，会发现光标处于接收输入的状态，此时我们输入一个字符串 lion 按下回车键后，控制台会打印出 hello lion 。")]),s._v(" "),t("h2",{attrs:{id:"_4-条件语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-条件语句"}},[s._v("#")]),s._v(" 4. 条件语句")]),s._v(" "),t("h3",{attrs:{id:"_1-if-格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-if-格式"}},[s._v("#")]),s._v(" 1. if 格式")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" 条件测试 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 条件测试左右必须要有空格")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 结束符")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" 条件测试 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])])]),t("h3",{attrs:{id:"_2-if-else-格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-if-else-格式"}},[s._v("#")]),s._v(" 2. if else 格式")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" 条件测试 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),t("h3",{attrs:{id:"_3-if-else-elif-格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-if-else-elif-格式"}},[s._v("#")]),s._v(" 3. if else elif 格式")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" 条件测试1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" 条件测试2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" 条件测试3 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".default\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])])]),t("h3",{attrs:{id:"_4-test-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-test-语句"}},[s._v("#")]),s._v(" 4. test 语句")]),s._v(" "),t("p",[s._v("test 等同 于 if [ ] ,只是 语句不同")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 声明变量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断数字是否相等")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num1")]),s._v(" -eq "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0 表示true 非0 表示 false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $? 获取到的是上一个函数或语句的的返回值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n")])])]),t("h3",{attrs:{id:"_5-case-多项分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-case-多项分支"}},[s._v("#")]),s._v(" 5. case 多项分支")]),s._v(" "),t("p",[s._v("类似于 switch...case")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  \t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zk"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"qq"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhengguo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里的逻辑或是一根竖线")]),s._v("\n   \t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('*"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   *"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   \t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"我不认识你 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"_5-shell-中的表达式和运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-shell-中的表达式和运算符"}},[s._v("#")]),s._v(" 5. shell 中的表达式和运算符")]),s._v(" "),t("h3",{attrs:{id:"_1-判断字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-判断字符串"}},[s._v("#")]),s._v(" 1. 判断字符串")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("$string1 = $string2")]),s._v("  表示两个字符串是否相等。")]),s._v(" "),t("li",[t("code",[s._v("$string1 != $string2")]),s._v(" 表示两个字符串是否不相等。")]),s._v(" "),t("li",[t("code",[s._v("-z $string")]),s._v("  表示字符串 string  是否为空。")]),s._v(" "),t("li",[t("code",[s._v("-n $string")]),s._v("  表示字符串 string  是否不为空。")])]),s._v(" "),t("h3",{attrs:{id:"_2-判断数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-判断数字"}},[s._v("#")]),s._v(" 2. 判断数字")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("$num1 -eq $num2")]),s._v(" equal  的缩写，表示两个数字是否相等。")]),s._v(" "),t("li",[t("code",[s._v("$num1 -ne $num2")]),s._v(" not equal  的缩写，表示两个数字是否不相等。")]),s._v(" "),t("li",[t("code",[s._v("$num1 -lt $num2")]),s._v(" lower than  的缩写，表示 num1  是否小于 num2 。")]),s._v(" "),t("li",[t("code",[s._v("$num1 -le $num2")]),s._v(" lower or equal  的缩写，表示 num1  是否小于或等于 num2 。")]),s._v(" "),t("li",[t("code",[s._v("$num1 -gt $num2")]),s._v(" greater than  的缩写，表示 num1  是否大于 num2 。")]),s._v(" "),t("li",[t("code",[s._v("$num1 -ge $num2")]),s._v(" greate or equal  的缩写，表示 num1  是否大于或等于 num2 。")])]),s._v(" "),t("h3",{attrs:{id:"_3-判断文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-判断文件"}},[s._v("#")]),s._v(" 3. 判断文件")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("-e $file")]),s._v(" exist  的缩写，表示文件是否存在。")]),s._v(" "),t("li",[t("code",[s._v("-d $file")]),s._v(" directory  的缩写，表示文件是否为一个目录。")]),s._v(" "),t("li",[t("code",[s._v("-f $file")]),s._v(" file  的缩写，表示文件是否是一个文件。")]),s._v(" "),t("li",[t("code",[s._v("-L $file")]),s._v(" Link  的缩写，表示链接。")]),s._v(" "),t("li",[t("code",[s._v("-r $file")]),s._v(" readable  的缩写，表示文件是否可读。")]),s._v(" "),t("li",[t("code",[s._v("-w $file")]),s._v(" writable  的缩写，表示文件是否可写。")]),s._v(" "),t("li",[t("code",[s._v("-x $file")]),s._v(" executable  的缩写，表示文件是否可执行。")]),s._v(" "),t("li",[t("code",[s._v("$file1 -nt $file2")]),s._v("  表示文件 file1  是否比 file2  更新。")]),s._v(" "),t("li",[t("code",[s._v("$file1 -ot $file2")]),s._v("  表示文件 file1  是否比 file2  更旧。")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"在1inux中，命令退出状态为0表示为真(正确)，非0表示假(错)"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请输入一个文件名"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" FILE FILE2\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -e "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" 存在? "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -s "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"非空?'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -b "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"块设备文件?'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -c "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"字符串设备文件? '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -d "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"目录文件? '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -f "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"普通文件? '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -L "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"软链接文件? '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -S "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"套接子文件? '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"管道文件？ '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v(" -nt "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"FILE -nt FILE2 : FILE的修改时间是否比FILE2新 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v(" -ot "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"FILE -ot FILE2 : FILE的修改时间是否比FILE2旧 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v(" -ef "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"FILE -ef FILE2 : 两个文件的inode节点号是否一样，用于判断是否是硬链接 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Linux内部使用 inode号来识别文件，而非文件名，对于系统来说，文件名是 inode号的别称，是便于用户识别文件的，文件名和 inode号是一一对应的关系，每个 inode号对应一个文件名")]),s._v("\n")])])]),t("h3",{attrs:{id:"_4-逻辑运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-逻辑运算符"}},[s._v("#")]),s._v(" 4. 逻辑运算符")]),s._v(" "),t("ol",[t("li",[s._v("&& 表示逻辑与，只要有一个不为真，整个条件测试为假。")]),s._v(" "),t("li",[s._v("|| 表示逻辑或，只要有一个为真，整个条件测试就为真。")]),s._v(" "),t("li",[s._v("! 表示反转测试条件。")])]),s._v(" "),t("h2",{attrs:{id:"_6-循环语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-循环语句"}},[s._v("#")]),s._v(" 6. 循环语句")]),s._v(" "),t("p",[s._v("Bash 中有 3 中类型的循环语句")]),s._v(" "),t("h3",{attrs:{id:"_1-while-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-while-循环"}},[s._v("#")]),s._v(" 1. while 循环")]),s._v(" "),t("p",[s._v("使用 shell 写一个 while 循环 判断 num1 小于 num2 就一直累加。直到 num1 等于 num2 后结束循环")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num1")]),s._v(" -lt "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v("num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"num1: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"num1 is now equal to num2 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num1")]),s._v('"')]),s._v("\n\n")])])]),t("h3",{attrs:{id:"_2-until-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-until-循环"}},[s._v("#")]),s._v(" 2. until 循环")]),s._v(" "),t("p",[s._v("它的执行逻辑和 while 正好相反。测试逻辑为假 才会执行循环，测试逻辑为真才会结束循环")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试 num1 是否大于 num2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("until")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num1")]),s._v(" -gt "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v("num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"num1: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("h3",{attrs:{id:"_3-for-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-for-循环"}},[s._v("#")]),s._v(" 3. for 循环")]),s._v(" "),t("p",[s._v("用于遍历列表值")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取当下目录的所有文件，遍历打印")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("listfile")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$listfile")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 遍历一组值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("animal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dog'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cat'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'pig'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$animal")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# seq 用于生成从一个数到另一个数之间的所有整数。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用法：seq [选项]... 尾数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#　 或：seq [选项]... 首数 尾数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#　 或：seq [选项]... 首数 增量 尾数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 借助 seq 的 for 循环 打印 1 到 10 到数字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印1 到 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#======")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印2 到 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#======")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印2n")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"_7-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-函数"}},[s._v("#")]),s._v(" 7. 函数")]),s._v(" "),t("p",[s._v("函数是实现一定功能的代码块，函数还是重用代码的一种方式。")]),s._v(" "),t("ol",[t("li",[s._v("函数名后面的圆括号中不加任何参数，这点与主流编程语言不相同。")]),s._v(" "),t("li",[s._v("函数的完整定义必须置于函数的调用之前。")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("print_something")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"我是一个函数"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nprint_something "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 调用")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取函数参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("print_something")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $1 获取第一个参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nprint_something Lion "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Lion 为参数")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 函数的返回值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("print_something")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nprint_something Lion\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" ‘函数的返回值："),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("’\n\n")])])]),t("h3",{attrs:{id:"_1-函数的局部变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数的局部变量"}},[s._v("#")]),s._v(" 1. 函数的局部变量")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("local_global")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'local 1'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过 local 关键字定义局部变量")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var1 is '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nlocal_global\n")])])]),t("h3",{attrs:{id:"_2-函数重载命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数重载命令"}},[s._v("#")]),s._v(" 2. 函数重载命令")]),s._v(" "),t("p",[s._v("可以用函数来实现命令的重载，也就是说把函数的名字取成与我们通常在命令行用的命令相同的名字，重载需要用到 command 关键字。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -lh\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);