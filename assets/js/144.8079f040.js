(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{718:function(a,e,p){"use strict";p.r(e);var t=p(10),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,p=a._self._c||e;return p("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[p("h2",{attrs:{id:"pnpm-monorepo-怎么搭建"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-monorepo-怎么搭建"}},[a._v("#")]),a._v(" pnpm Monorepo 怎么搭建")]),a._v(" "),p("p",[a._v("要搭建 pnpm monorepo，请按照以下步骤操作：")]),a._v(" "),p("ol",[p("li",[a._v("安装 pnpm：在终端中运行 "),p("code",[a._v("npm install -g pnpm")]),a._v("。")]),a._v(" "),p("li",[a._v("创建一个空的 Git 仓库（如果没有）：使用 "),p("code",[a._v("git init")]),a._v(" 创建一个新的仓库或将现有仓库转换为子模块仓库。")]),a._v(" "),p("li",[a._v("在仓库根目录下创建一个 "),p("code",[a._v("packages")]),a._v(" 文件夹，用于存放子项目。")]),a._v(" "),p("li",[a._v("在 "),p("code",[a._v("packages")]),a._v(" 文件夹下为每个子项目创建一个文件夹，并使用 "),p("code",[a._v("npm init")]),a._v(" 初始化每个项目。")]),a._v(" "),p("li",[a._v("在每个子项目的 "),p("code",[a._v("package.json")]),a._v(" 文件中添加 "),p("code",[a._v('"version": "0.0.0"')]),a._v(" 和 "),p("code",[a._v('"private": true')]),a._v(" 字段，以防止意外发布。")]),a._v(" "),p("li",[a._v("在主项目的 "),p("code",[a._v("package.json")]),a._v(" 文件中使用 "),p("code",[a._v('"workspaces"')]),a._v(" 字段指定要包含的子项目的路径，例如：")])]),a._v(" "),p("div",{staticClass:"language-json extra-class"},[p("pre",{pre:!0,attrs:{class:"language-json"}},[p("code",[p("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),p("span",{pre:!0,attrs:{class:"token property"}},[a._v('"name"')]),p("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),p("span",{pre:!0,attrs:{class:"token string"}},[a._v('"my-monorepo"')]),p("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),p("span",{pre:!0,attrs:{class:"token property"}},[a._v('"private"')]),p("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),p("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),p("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),p("span",{pre:!0,attrs:{class:"token property"}},[a._v('"workspaces"')]),p("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),p("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),p("span",{pre:!0,attrs:{class:"token string"}},[a._v('"packages/*"')]),p("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),p("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),p("ol",{attrs:{start:"7"}},[p("li",[a._v("运行 "),p("code",[a._v("pnpm install")]),a._v(" 安装所有依赖项。")]),a._v(" "),p("li",[a._v("在子项目之间进行相互依赖时，可以使用 "),p("code",[a._v("pnpm link <package-name>")]),a._v(" 命令将一个子项目链接到另一个子项目。")])]),a._v(" "),p("p",[a._v("完成以上步骤后，您应该已经完成了 pnpm monorepo 的搭建。")]),a._v(" "),p("h2",{attrs:{id:"pnpm-monorepo-如何在一个子项目中引入另一个子项目"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-monorepo-如何在一个子项目中引入另一个子项目"}},[a._v("#")]),a._v(" pnpm monorepo 如何在一个子项目中引入另一个子项目")]),a._v(" "),p("p",[a._v("在一个子项目中引入另一个子项目，可以使用相对路径或者包名的方式进行引用。")]),a._v(" "),p("p",[a._v("使用相对路径：")]),a._v(" "),p("p",[a._v("假设我们有两个子项目："),p("code",[a._v("packages/project-a")]),a._v(" 和 "),p("code",[a._v("packages/project-b")]),a._v("，要在 "),p("code",[a._v("project-a")]),a._v(" 中引用 "),p("code",[a._v("project-b")]),a._v("，可以这样做：")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("import { someFunction } from '../project-b/src';\n")])])]),p("p",[a._v("使用包名：")]),a._v(" "),p("p",[a._v("假设我们有两个子项目："),p("code",[a._v("packages/project-a")]),a._v(" 和 "),p("code",[a._v("packages/project-b")]),a._v("，要在 "),p("code",[a._v("project-a")]),a._v(" 中引用 "),p("code",[a._v("project-b")]),a._v("，先在 "),p("code",[a._v("project-b")]),a._v(" 的 "),p("code",[a._v("package.json")]),a._v(" 文件中添加如下配置：")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v('{\n  "name": "@my-monorepo/project-b",\n  ...\n}\n')])])]),p("p",[a._v("然后在 "),p("code",[a._v("project-a")]),a._v(" 中可以这样引用 "),p("code",[a._v("project-b")]),a._v("：")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("import { someFunction } from '@my-monorepo/project-b';\n")])])]),p("p",[a._v("注意，在使用包名方式时，需要将子项目的名称添加到包名前面并使用 "),p("code",[a._v("@")]),a._v(" 符号分隔。")]),a._v(" "),p("h2",{attrs:{id:"pnpm-monorepo-给子项目安装依赖该怎么做"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-monorepo-给子项目安装依赖该怎么做"}},[a._v("#")]),a._v(" pnpm monorepo 给子项目安装依赖该怎么做")]),a._v(" "),p("p",[a._v("在 pnpm monorepo 中给子项目安装依赖，可以在主项目根目录下运行 "),p("code",[a._v("pnpm install")]),a._v(" 命令。这会自动为所有子项目安装它们所需的依赖项，并且会在主项目的 "),p("code",[a._v("node_modules")]),a._v(" 目录下创建一个名为 "),p("code",[a._v(".pnpmfile.yaml")]),a._v(" 的文件，用于管理子项目之间的依赖关系。如果需要为单独的子项目安装依赖项，可以使用 "),p("code",[a._v("pnpm install")]),a._v(" 命令，并指定要安装的子项目的路径，例如：")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("pnpm install --filter=packages/project-a\n")])])]),p("p",[a._v("这将仅为 "),p("code",[a._v("packages/project-a")]),a._v(" 子项目安装依赖项。")]),a._v(" "),p("h2",{attrs:{id:"如果我单独要给子项目新增一个依赖该怎么做"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#如果我单独要给子项目新增一个依赖该怎么做"}},[a._v("#")]),a._v(" 如果我单独要给子项目新增一个依赖该怎么做")]),a._v(" "),p("p",[a._v("如果要单独给某个子项目新增一个依赖项，可以在该子项目的根目录下使用 "),p("code",[a._v("pnpm add")]),a._v(" 命令进行安装，例如：")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("cd packages/project-a\npnpm add lodash\n")])])]),p("p",[a._v("这将在 "),p("code",[a._v("project-a")]),a._v(" 的 "),p("code",[a._v("package.json")]),a._v(" 文件中添加 "),p("code",[a._v("lodash")]),a._v(" 作为依赖项，并将其安装到 "),p("code",[a._v("project-a")]),a._v(" 的 "),p("code",[a._v("node_modules")]),a._v(" 目录下。同时，对于其他子项目，它们不会自动获得此依赖项，因此如果需要在其他子项目中使用 "),p("code",[a._v("lodash")]),a._v("，必须在这些项目中单独安装它。")]),a._v(" "),p("h2",{attrs:{id:"在主项目安装的依赖-子项目也可以使用吗"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#在主项目安装的依赖-子项目也可以使用吗"}},[a._v("#")]),a._v(" 在主项目安装的依赖，子项目也可以使用吗")]),a._v(" "),p("p",[a._v("是的，在 pnpm monorepo 中，主项目安装的依赖也可以在子项目中使用。当主项目安装依赖时，它们会自动为所有子项目安装相同版本的依赖项，并将它们链接到主项目的 "),p("code",[a._v("node_modules")]),a._v(" 目录下。这使得子项目可以轻松地共享和重用依赖项，从而提高了项目的开发效率。同时，如果需要单独为某个子项目安装特定版本的依赖项，也可以在该子项目的根目录下使用 "),p("code",[a._v("pnpm add")]),a._v(" 命令进行安装。")]),a._v(" "),p("h2",{attrs:{id:"pnpm-会不会读取-package-json-workspace-字段-启用工作区模式"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-会不会读取-package-json-workspace-字段-启用工作区模式"}},[a._v("#")]),a._v(" pnpm 会不会读取 package.json workspace 字段 启用工作区模式")]),a._v(" "),p("p",[a._v("是的，如果 "),p("code",[a._v("pnpm-workspace.yaml")]),a._v(" 文件不存在，"),p("code",[a._v("pnpm")]),a._v(" 会尝试读取项目中的 "),p("code",[a._v("package.json")]),a._v(" 文件中的 "),p("code",[a._v("workspace")]),a._v(" 字段来启用工作区模式。如果该字段存在且包含子目录列表，则 "),p("code",[a._v("pnpm")]),a._v(" 将使用工作区模式来处理这些子目录。")]),a._v(" "),p("h2",{attrs:{id:"pnpm-主项目去执行子项目的-scripts-该怎么做"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-主项目去执行子项目的-scripts-该怎么做"}},[a._v("#")]),a._v(" pnpm 主项目去执行子项目的 scripts 该怎么做？")]),a._v(" "),p("p",[a._v("要在主项目中执行子项目的脚本，可以使用 "),p("code",[a._v("pnpm run")]),a._v(" 命令并指定要运行的子项目及其脚本名称。例如，要在名为 "),p("code",[a._v("sub-project")]),a._v(" 的子项目中运行 "),p("code",[a._v("build")]),a._v(" 脚本，可以使用以下命令：")]),a._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[a._v("pnpm run --filter sub-project build\n")])])]),p("p",[a._v("这将在 "),p("code",[a._v("sub-project")]),a._v(" 目录中执行 "),p("code",[a._v("build")]),a._v(" 脚本。")])])}),[],!1,null,null,null);e.default=s.exports}}]);