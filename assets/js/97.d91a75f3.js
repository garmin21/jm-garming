(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{675:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"什么是原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型"}},[t._v("#")]),t._v(" 什么是原型")]),t._v(" "),a("p",[t._v("原型是 function 的一个属性，它定义了构造函数制造出来的对象的共有祖先，通过该构造函数产生的对象，可以继承该原型的属性和方法，"),a("strong",[t._v("原型它也是对象")])]),t._v(" "),a("h3",{attrs:{id:"_1-原型的基本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原型的基本"}},[t._v("#")]),t._v(" 1. 原型的基本")]),t._v(" "),a("ol",[a("li",[t._v("原型是个对象")]),t._v(" "),a("li",[t._v("所有的对象都有原型")]),t._v(" "),a("li",[t._v("对象可以继承原型的属性 和（方法）")]),t._v(" "),a("li",[t._v("(构造｜普通)函数的 prototype 属性指向一个对象，这个对象是原型对象 也是（"),a("strong",[t._v("构造函数的实例的原型")]),t._v("）")]),t._v(" "),a("li",[t._v("原型对象有 constructor 属性，指向构造函数")])]),t._v(" "),a("p",[t._v("得出一张图：\n"),a("img",{attrs:{src:t.$withBase("/2.webp"),width:"100%",height:"100%",alt:"1"}})]),t._v(" "),a("h3",{attrs:{id:"_2-proto-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-proto-属性"}},[t._v("#")]),t._v(" 2. "),a("code",[t._v("__proto__")]),t._v(" 属性")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/3.webp"),width:"100%",height:"100%",alt:"1"}}),t._v(" "),a("p",[t._v("上图可以看到 Parent 原型（ Parent.prototype ）上有 "),a("code",[t._v("__proto__")]),t._v(" 属性，这是一个访问器属性（即 getter 函数和 setter 函数），通过它可以访问到对象的内部 "),a("code",[t._v("[[Prototype]]")]),t._v(" (一个对象或 null )。")]),t._v(" "),a("p",[a("code",[t._v("__proto__")]),t._v(" 发音 dunder proto，最先被 Firefox 使用，后来在 ES6 被列为 Javascript 的标准内建属性。")]),t._v(" "),a("ol",[a("li",[t._v("这里用 "),a("code",[t._v("p.__proto__")]),t._v(" 获取对象的原型，")]),t._v(" "),a("li",[a("code",[t._v("__proto__")]),t._v(" 是每个实例上都有的属性，")]),t._v(" "),a("li",[a("code",[t._v("prototype")]),t._v(" 是构造函数的属性，这两个并不一样，但 "),a("code",[t._v("p.__proto__")]),t._v(" 和 "),a("code",[t._v("Parent.prototype")]),t._v(" 指向同一个对象。")])]),t._v(" "),a("p",[t._v("看到这里我门得出结论：实例对象上有一个属性 "),a("code",[t._v("__proto__")]),t._v(" 指向其 "),a("code",[t._v("构造函数.prototype")]),t._v(" 同一个原型对象")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("所以 对象、构造函数、原型之间关系如下：")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/4.webp"),width:"100%",height:"100%",alt:"1"}}),t._v(" "),a("ol",[a("li",[a("p",[t._v("对象和构造函数： 对象是由构造函数产生的实例。")])]),t._v(" "),a("li",[a("p",[t._v("对象和原型： 每个对象都有原型，可以"),a("code",[t._v("__proto__")]),t._v("读取到原型上的属性和方法。")])]),t._v(" "),a("li",[a("p",[t._v("构造函数和原型： 如果对象的构造函数相同，那么对象的原型也相同。构造函数的 prototype 指向实例的原型，实例原型的 constructor 指向构造函数（互相引用）")])])]),t._v(" "),a("h3",{attrs:{id:"_3-如何获取原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何获取原型对象"}},[t._v("#")]),t._v(" 3. 如何获取原型对象")]),t._v(" "),a("h4",{attrs:{id:"_1-方式一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-方式一"}},[t._v("#")]),t._v(" 1. 方式一")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nReflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nReflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-方式二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-方式二"}},[t._v("#")]),t._v(" 2. 方式二")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninstall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninstall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型链"}},[t._v("#")]),t._v(" 4. 原型链")]),t._v(" "),a("p",[t._v("每个对象拥有一个原型对象，通过 "),a("code",[t._v("__proto__")]),t._v(" 指针指向上一个原型 ，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null。这种关系被称为原型链 (prototype chain)，通过原型链一个对象会拥有定义在其他对象中的属性和方法")]),t._v(" "),a("p",[a("strong",[t._v("看一个例子：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Parent {age: 50}")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("下图展示了原型链的运作机制。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/5.webp"),width:"100%",height:"100%",alt:"1"}}),t._v(" "),a("h3",{attrs:{id:"_5-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[t._v("#")]),t._v(" 5. 总结")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("__proto__")]),t._v(" 是每个实例上都有的属性，"),a("code",[t._v("prototype")]),t._v(" 是构造函数的属性，这两个并不一样，但 "),a("code",[t._v("p.__proto__")]),t._v(" 和 "),a("code",[t._v("Parent.prototype")]),t._v(" 指向同一个对象。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("__proto__")]),t._v(" 属性在 ES6 时被标准化，但因为性能问题并不推荐使用，推荐使用 "),a("code",[t._v("Object.getPrototypeOf()")])])]),t._v(" "),a("li",[a("p",[t._v("每个对象拥有一个原型对象，通过 "),a("code",[t._v("__proto__")]),t._v(" 指针指向上一个原型 ，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null，这就是原型链。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);