(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{615:function(t,n,s){"use strict";s.r(n);var a=s(10),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://webpack.docschina.org/configuration/",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack 文档"),s("OutboundLink")],1)]),t._v(" "),s("ol",[s("li",[s("code",[t._v("optimization.minimize")]),t._v("  压缩 bundle")])]),t._v(" "),s("p",[t._v("告知 webpack 使用 TerserPlugin 压缩 bundle。")]),t._v(" "),s("p",[t._v("production 模式下，这里默认是 true。")]),t._v(" "),s("ol",[s("li",[t._v("布尔值")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("```json\n  module.exports = {\n    //...\n    optimization: {\n      minimize: false\n    }\n  };\n```\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("使用插件")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("```json\n  const TerserPlugin = require('terser-webpack-plugin');\n\n  module.exports = {\n    optimization: {\n      minimizer: [\n        new TerserPlugin({\n          cache: true,\n          parallel: true,\n          sourceMap: true, // Must be set to true if using source-maps in production\n          terserOptions: {\n            // https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions\n          }\n        }),\n      ],\n    }\n  };\n\n```\n\n3. 函数\n```json\n  module.exports = {\n    optimization: {\n      minimizer: [\n        (compiler) => {\n          const TerserPlugin = require('terser-webpack-plugin');\n          new TerserPlugin({ /* your config */ }).apply(compiler);\n        }\n      ],\n    }\n  };\n```\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("splitChunks")])])]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[t._v("    在 Webpack 中，`splitChunks` 是用于配置代码分割（code splitting）的选项，用于将代码拆分成多个块，以便更好地利用浏览器的缓存机制和减少重复加载的代码量。通过合理配置 `splitChunks` 选项，可以优化项目的性能和用户体验。\n\n以下是一个简单的 `splitChunks` 配置示例：\n\n```javascript\nmodule.exports = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  optimization"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      chunks"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 'all'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      minSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      maxSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      minChunks"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      maxAsyncRequests"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      maxInitialRequests"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      automaticNameDelimiter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" '~'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      cacheGroups"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        vendors"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          test"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" /"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\\\/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("node_modules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\\\/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          priority"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("-10")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        default"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          minChunks"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          priority"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("-20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          reuseExistingChunk"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(";\n")])])]),s("p",[t._v("上面的配置中包含了一些常用的 "),s("code",[t._v("splitChunks")]),t._v(" 配置选项，主要包括：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("chunks")]),t._v(": 指定哪些块需要被分割，可以是 "),s("code",[t._v("'all'")]),t._v("、"),s("code",[t._v("'async'")]),t._v("、"),s("code",[t._v("'initial'")]),t._v(" 中的一个。")]),t._v(" "),s("li",[s("code",[t._v("minSize")]),t._v(": 指定生成的块的最小大小。")]),t._v(" "),s("li",[s("code",[t._v("maxSize")]),t._v(": 指定生成的块的最大大小。")]),t._v(" "),s("li",[s("code",[t._v("minChunks")]),t._v(": 指定一个模块至少被引用的次数才会被单独拆分出来。")]),t._v(" "),s("li",[s("code",[t._v("cacheGroups")]),t._v(": 定义了拆分规则，可以根据不同的规则将模块打包到不同的文件中，例如将第三方库打包到一个文件中。")])]),t._v(" "),s("p",[t._v("通过合理配置 "),s("code",[t._v("splitChunks")]),t._v("，可以根据项目的特性和需求来优化代码拆分，提升页面加载性能和用户体验。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])])])}),[],!1,null,null,null);n.default=e.exports}}]);